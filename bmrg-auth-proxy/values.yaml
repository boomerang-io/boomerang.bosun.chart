# Default values for bmrg-auth-proxy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

#General Configuration
general:
  namePrefix:
  zone: untrusted

auth:
  # oidcw3, oidcibm or saml possible providers.
  # if 'displayHtpasswdForm' is activated, this value is ignored
  provider: oidcibm
  # set to true if basic-auth is desired
  displayHtpasswdForm: false
  args:
    - --oidc-issuer-url=
    - --login-url=
    - --redeem-url=
    - --oidc-jwks-url=
    - --client-secret=
    - --client-id=
    - --cookie-secure=true
    - --cookie-domain=useboomerang.io
    - --cookie-path=/
    - --upstream=file:///dev/null
    - --http-address=0.0.0.0:4180
    - --cookie-secret=L_7zkUsPN3jxRkND9zne3w==
    - --scope=openid
    - --set-authorization-header=true
    - --pass-authorization-header=true
    - --skip-provider-button=true
    - --skip-oidc-discovery=true
    - --insecure-oidc-allow-unverified-email=true
    - --cookie-expire=24h0m0s
    - --whitelist-domain=
    # pass -pass-basic-auth for basic-auth mechanism
    - --pass-basic-auth=true
    - --user-id-claim=emailAddress

image:
  registry: boomerangio
  pullPolicy: IfNotPresent
  pullSecret:
  replicaCount: 1

services:
  authProxy:
    image:
      repository: /oauth2-proxy
      tag: 5.1.0-bmrg.2
#  authProxy:
#    image:
#      repository: /bmrg-saml-proxy
#      tag: 0.1.0-bmrg.1

# name of the configmap under which the end-user can provide the user/password list for basic-auth
configMap:
  # leaving it empty will use the default admin/admin
  htpasswdData:
#  htpasswdData: auth-proxy-users-config
  # name of the configmap that defines the custom sign-in and error html pages
  # leaving it empty will use the default essentials one

ingress:
  enabled: false
  path: /oauth
  host: try.useboomerang.io
  tlsSecretName: bmrg-tls-cloud
  # The prefix for the annotations inside the ingress definition. Typically for IKS Community Ingress
  # you need to set it to "nginx.ingress.kubernetes.io"
  annotationsPrefix: "ingress.kubernetes.io"
  # The class of the ingress, it is used to mark the ingress resources to be picked-up by a specific
  # controller. For IKS Community Ingress set it to "public-iks-k8s-nginx"
  class: "nginx"

nodeSelector: {}
# nodeSelector:
#   proxy: "true"

affinity: {}
# affinity:
#   key1: "value1"
#   key2: "value2"

tolerations: []
# tolerations:
# - key: "dedicated"
#   operator: "Exists"
#   effect: "NoSchedule"

authorization:
  # Enables authorization based on the email-list
  allowEmailList:
    enabled: false
    # How the email-list file will be projected, via a configmap or secret
    persistence: configmap
    # Name of the external secret/configmap to use as allow email-list
    # If not provided it will generate the file based on the provided values
    name:
    # List of allowed email addresses
    emailList:
    - test@ibm.com
    - sample@sample.com
  # Enables authorization based on email domain list, csv based list
  # TODO document the cases, in readme and here
  emailDomains: "*"

redis:
  enabled: false
  redisPort: 6379
  cluster:
    enabled: false
    slaveCount: 1
  ## Use password authentication
  usePassword: false
  master:
    persistence:
      enabled: false
#    nodeSelector:
#      proxy: "true"
#    tolerations:
#    - effect: NoSchedule
#      key: dedicated
#      operator: Exists
  slave:
    persistence:
      enabled: false
