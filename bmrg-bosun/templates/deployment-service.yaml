{{- $platform := "bmrg" -}}
{{- $product := "bosun" -}}
{{- $tier := "service" -}}
{{- $values := .Values -}}
{{- $context := . -}}
{{- range $k, $v := .Values.service }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "bmrg.name" (dict "context" $context "tier" $tier "component" $k ) }}
  labels:
    name: {{ include "bmrg.name" (dict "context" $context "tier" $tier "component" $k ) }}
    {{- include "bmrg.labels.chart" (dict "context" $context "tier" $tier "component" $k ) | nindent 4 }}
spec:
  replicas: {{ $v.replicaCount }}
  selector:
    matchLabels:
      name: {{ include "bmrg.name" (dict "context" $context "tier" $tier "component" $k ) }}
      {{- include "bmrg.labels.standard" (dict "context" $context "platform" $platform "product" $product "tier" $tier "component" $k "zone" $v.zone) | nindent 6 }}
  template:
    metadata:
      labels:
        name: {{ include "bmrg.name" (dict "context" $context "tier" $tier "component" $k ) }}
        {{- include "bmrg.labels.standard" (dict "context" $context "platform" $platform "product" $product "tier" $tier "component" $k "zone" $v.zone) | nindent 8 }}
    spec:
      {{- if $values.monitoring.newrelic.apm.key }}
      initContainers:
        - name: util-newrelicapm-cntr
          image: {{ $.Values.monitoring.newrelic.apm.image.registry }}{{ $.Values.monitoring.newrelic.apm.image.repository }}:{{ $.Values.monitoring.newrelic.apm.image.tag }}
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: apm-newrelic
            mountPath: /opt/newrelic
      {{- end }}
      containers:
        - name: "{{ $tier }}-{{ $k }}-cntr"
          image: "{{ $values.image.registry }}{{ $v.image.repository }}:{{ $v.image.tag }}"
          imagePullPolicy: "{{ $values.image.pullPolicy }}"
          env:
          - name: JAVA_OPTS
            value: '-Dspring.config.additional-location=file:/data/application.properties{{- if $values.monitoring.newrelic.apm.key }}{{- if $values.proxy.enable }} -Dnewrelic.config.proxy_host={{ $values.proxy.host }} -Dnewrelic.config.proxy_port={{ $values.proxy.port }} -Dnewrelic.config.distributed_tracing.enabled=true{{- end }} -javaagent:/opt/newrelic/newrelic.jar{{- end }}{{- if eq $k "urbancode" }} -Dspring.datasource.url=jdbc:mysql://10.190.20.153:3306/ibm_ucd{{- end }}{{- if eq $k "controller" }} -Dspring.profiles.active=cicd{{- end }}'
          - name: NEW_RELIC_LICENSE_KEY
            value: {{ $values.monitoring.newrelic.apm.key }}
          - name: NEW_RELIC_APP_NAME
            value: '{{ $values.monitoring.newrelic.apm.name }} - {{ $tier }}'
          - name: NEW_RELIC_PROCESS_HOST_DISPLAY_NAME
            value: '{{ include "bmrg.name" (dict "context" $context "tier" $tier "component" $k ) }}'
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ if $values.global.database.mongodb.secretName }}{{ $values.global.database.mongodb.secretName }}{{ else }}{{ include "bmrg.name" (dict "context" $context "tier" "secrets" ) }}{{ end }}
                key: {{ if $values.global.database.mongodb.secretName }}mongodb-password{{ else }}MONGODB_PASSWORD{{ end }}
          ports:
          - containerPort: 8080
            name: {{ $platform }}-port-cntr
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: {{ $platform }}-port-cntr
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              memory: 1Gi
          volumeMounts:
          - name: application-config
            mountPath: "/data"
            readOnly: true
          {{- if $values.monitoring.newrelic.apm.key }}
          - name: apm-newrelic
            mountPath: /opt/newrelic
          {{- end }}
      {{- with $values.hostAliases }}
      hostAliases:
{{ toYaml . | indent 8 }}
      {{- end }}
      volumes:
      - name: application-config
        configMap:
          name: {{ include "bmrg.name" (dict "context" $context "tier" "config" ) }}
          items:
          - key: application.properties
            path: application.properties
      {{- if $values.monitoring.newrelic.apm.key }}
      - name: apm-newrelic
        emptyDir: {}
      {{- end }}
      {{- if $values.image.pullSecret }}
      imagePullSecrets:
      - name: {{ $values.image.pullSecret }}
      {{- end }}
      restartPolicy: Always
---
{{- end }}