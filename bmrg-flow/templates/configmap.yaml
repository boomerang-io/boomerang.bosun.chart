{{- $platform := "bmrg" -}}
{{- $product := "flow" -}}
{{- $tier := "config" -}}
{{- $values := .Values -}}
{{- $context := . -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "bmrg.name" (dict "context" $context "tier" $tier ) }}
  labels:
    {{- include "bmrg.labels.chart" (dict "context" $context "tier" $tier ) | nindent 4 }}
data:
  application.properties: |
    server.port=8080
    spring.data.mongodb.uri=mongodb://{{ $.Values.global.database.mongodb.user }}:${MONGODB_PASSWORD}@{{ $.Values.global.database.mongodb.host }}{{ if $.Values.global.database.mongodb.port }}:{{ $.Values.global.database.mongodb.port }}{{ end }}/{{ $.Values.global.database.mongodb.database }}{{ if $.Values.global.database.mongodb.args }}?{{ $.Values.global.database.mongodb.args }}{{ end }}
    flow.mongo.collection.prefix={{ default "bmrg-flow" $.Values.general.namePrefix | trimPrefix "bmrg-" | replace "-" "_" }}
    flow.apps.flow.url=https://{{ $.Values.global.ingress.host }}{{- default "" $.Values.global.ingress.root }}/apps/flow
    flow.services.workflow.url=https://{{ $.Values.global.ingress.host }}{{- default "" $.Values.global.ingress.root }}/services/workflow
    flow.services.listener.url=https://{{ $.Values.global.ingress.host }}{{- default "" $.Values.global.ingress.root }}/services/listener
    {{- range $k, $v := $values.services }}
    {{ $k }}.service.host={{- include "bmrg.name" (dict "context" $context "tier" "services" "component" $k ) }}
    {{ $k }}.service.root={{ if $.Values.global.ingress.root }}{{ $.Values.global.ingress.root }}{{ end }}/services/{{ $k }}
    {{- end }}
    {{- include "bmrg.core.services" $ | indent 4 }}
    eventing.enabled={{ $values.eventing.enabled }}
    {{- if $.Values.eventing.enabled }}
    eventing.nats.server.urls={{ $values.eventing.natsUrls }}
    eventing.nats.server.reconnect-wait-time=PT10S
    eventing.nats.server.reconnect-max-attempts=-1
    eventing.jetstream.stream.name={{ .Release.Name }}-event-stream
    eventing.jetstream.stream.storage-type=File
    eventing.jetstream.stream.subject={{ .Release.Name }}.event.cloudevent
    eventing.jetstream.consumer.name={{ .Release.Name }}-event-consumer
    eventing.jetstream.consumer.resub-wait-time=PT10S
    {{- end }}
    {{- if $.Values.general.enable.debug }}
    logging.level.org.springframework.web.client.RestTemplate=DEBUG
    logging.level.org.springframework.core.env.PropertySourcesPropertyResolver=DEBUG
    logging.level.root=INFO
    logging.level.net.boomerangplatform.service=DEBUG
    {{- end }}
    {{- if $.Values.general.enable.debug }}
    logging.level.org.springframework.web.client.RestTemplate=DEBUG
    logging.level.org.springframework.core.env.PropertySourcesPropertyResolver=DEBUG
    logging.level.root=INFO
    logging.level.net.boomerangplatform.service.runner.misc=DEBUG
    logging.level.net.boomerangplatform.service.crud=DEBUG
    {{- end }}
    kube.worker.logging.type={{ $values.workers.logging.type }}
    kube.worker.logging.host={{ $values.workers.logging.host }}
    kube.worker.logging.port={{ $values.workers.logging.port }}
    kube.worker.logging.keystore.name=/etc/secrets/logstash-elasticsearch-keystore.jks
    kube.worker.logging.keystore.password=changeme
    kube.worker.hostaliases={{ $.Values.hostAliases | toJson }}
    kube.worker.serviceaccount={{- if $values.workers.security.enable }}{{ $platform }}-{{ $product }}-worker{{ end }}
    kube.worker.nodeselector={{ $values.workers.nodeSelector | toJson }}
    kube.worker.tolerations={{ $values.workers.tolerations | toJson }}
    boomerang.environment={{ .Release.Namespace }}
    boomerang.instance={{ .Release.Name }}
    boomerang.product={{ $.Values.general.namePrefix }}
    boomerang.version={{ .Chart.AppVersion }}
    boomerang.otc=${FLOW_OTC}
    boomerang.authorization.basic.password=coronet-cottage-nave-idiom-resume
    boomerang.signOutUrl={{ $.Values.global.auth.prefix }}/sign_out{{ if $.Values.global.auth.signOutRedirect }}?rd={{ $.Values.global.auth.signOutRedirect }}{{ end }}
    boomerang.baseUrl=https://{{ $.Values.global.ingress.host }}
    swagger.enable={{ $.Values.general.enable.apidocs }}
    proxy.enable={{ $.Values.proxy.enable }}
    {{- if $.Values.proxy.enable }}
    proxy.host={{ $.Values.proxy.host }}
    proxy.port={{ $.Values.proxy.port }}
    proxy.ignore={{ $.Values.proxy.ignore }}
    {{- if $.Values.monitoring.newrelic.enable }}
    newrelic.config.common.proxy_host={{ $.Values.proxy.host }}
    newrelic.config.common.proxy_port={{ $.Values.proxy.port }}
    newrelic.config.proxy_host={{ $.Values.proxy.host }}
    newrelic.config.proxy_port={{ $.Values.proxy.port }}
    {{- end }}
    {{- end }}
    {{- if $.Values.monitoring.newrelic.enable }}
    newrelic.config.distributed_tracing.enabled=true
    {{- end }}
    opentracing.jaeger.enabled={{ $.Values.monitoring.jaeger.enabled }}
    opentracing.jaeger.udp-sender.host={{ $.Values.monitoring.jaeger.agent.host }}.{{ $.Values.monitoring.jaeger.namespace }}
    opentracing.jaeger.udp-sender.port={{ $.Values.monitoring.jaeger.agent.port }}
    opentracing.jaeger.http-sender.url=http://{{ $.Values.monitoring.jaeger.collector.host }}.{{ $.Values.monitoring.jaeger.namespace }}:{{ $.Values.monitoring.jaeger.collector.port }}/api/traces
    opentracing.jaeger.remote-controlled-sampler.host-port={{ $.Values.monitoring.jaeger.remoteControlledSampler.host }}.{{ $.Values.monitoring.jaeger.namespace }}:{{ $.Values.monitoring.jaeger.remoteControlledSampler.port }}
    flow.externalUrl.team={{$values.general.externalUrl.teams }}
    flow.externalUrl.user={{$values.general.externalUrl.users }}
    flow.externalUrl.navigation={{$values.general.externalUrl.navigation }}
    flow.externalUrl.platformNavigation={{$values.general.externalUrl.headerNavigation }}
