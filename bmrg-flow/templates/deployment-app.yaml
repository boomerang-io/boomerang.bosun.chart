{{- $platform := "bmrg" -}}
{{- $product := "flow" -}}
{{- $tier := "apps" -}}
{{- $values := .Values -}}
{{- $context := . -}}
{{- range $k, $v := $values.apps }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "bmrg.name" (dict "context" $context "tier" $tier "component" $k ) }}
  labels:
    {{- include "bmrg.labels.chart" (dict "context" $context "tier" $tier "component" $k ) | nindent 4 }}
spec:
  replicas: {{ $v.replicaCount }}
  selector:
    matchLabels:
      name: {{ include "bmrg.name" (dict "context" $context "tier" $tier "component" $k ) }}
      {{- include "bmrg.labels.standard" (dict "context" $context "platform" $platform "product" $product "tier" $tier "component" $k "zone" $v.zone ) | nindent 6 }}
  template:
    metadata:
      labels:
        name: {{ include "bmrg.name" (dict "context" $context "tier" $tier "component" $k ) }}
        {{- include "bmrg.labels.standard" (dict "context" $context "platform" $platform "product" $product "tier" $tier "component" $k "zone" $v.zone) | nindent 8 }}
    spec:
      containers:
        - name: {{ $tier }}-{{ $k }}-cntr
          image: "{{ $values.image.registry }}{{ $v.image.repository }}:{{ $v.image.tag }}"
          imagePullPolicy: {{ $values.image.pullPolicy }}
          env:
            - name: APP_ROOT
              value: "{{ default "" $.Values.global.ingress.root }}/{{ $tier }}/{{ $k }}"
            - name: PORT
              value: "3000"
            - name: NEW_RELIC_APP_NAME
              value: "{{ $.Values.monitoring.newrelic.apm.name }} - {{ $tier }}"
            - name: NEW_RELIC_LICENSE_KEY
              value: "{{ $.Values.monitoring.newrelic.apm.key }}"
            - name: NEW_RELIC_PROXY_HOST
              value: "{{ $.Values.proxy.host }}"
            - name: NEW_RELIC_PROXY_PORT
              value: "{{ $.Values.proxy.port }}"
            - name: NEW_RELIC_BROWSER_ID
              value: "{{ $.Values.monitoring.newrelic.browser.id }}"
            - name: NEW_RELIC_BROWSER_KEY
              value: "{{ $.Values.monitoring.newrelic.browser.key }}"
            - name: HTML_HEAD_INJECTED_SCRIPTS
              value: {{ if $.Values.monitoring.newrelic.browser.key }}"newrelic-browser.js"{{ else }}""{{ end }}
            - name: CORE_ENV_URL
              value: "https://{{ $.Values.global.ingress.host }}{{ $.Values.core.ingressRoot }}"
            - name: CORE_APPS_ENV_URL
              value: "https://{{ $.Values.global.ingress.host }}{{ $.Values.core.ingressRoot }}/apps"
            - name: CORE_SERVICE_ENV_URL
              value: "https://{{ $.Values.global.ingress.host }}{{ $.Values.core.ingressRoot }}/services"
            - name: PRODUCT_ENV_URL
              value: "https://{{ $.Values.global.ingress.host }}{{ $.Values.global.ingress.root }}"
            - name: PRODUCT_APPS_ENV_URL
              value: "https://{{ $.Values.global.ingress.host }}{{ $.Values.global.ingress.root }}/apps"
            - name: PRODUCT_SERVICE_ENV_URL
              value: "https://{{ $.Values.global.ingress.host }}{{ $.Values.global.ingress.root }}/services"
          ports:
          - containerPort: 3000
            name: {{ $platform }}-port-cntr
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: {{ $platform }}-port-cntr
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              memory: 100Mi
      {{- if $values.image.pullSecret }}
      imagePullSecrets:
      - name: {{ $values.image.pullSecret }}
      {{- end }}
      restartPolicy: Always
---
{{- end }}